{
    "swagger": "2.0",
    "info": {
      "title": "Products API",
      "description": "API to manage products",
      "version": "1.0.0"
    },
    "host": "localhost:3000",
    "basePath": "/",
    "schemas": ["http", "https"],
    "consumes": ["application/json", "application/xml"],
    "produces": ["application/json", "application/xml"],
    "paths": {
      "/login": {
        "post": {
          "description": "Logs in a user and returns a JWT token.",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": "Request body containing email and password.",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the user."
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful login. Returns a JWT token.",
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The JWT token."
                  }
                }
              }
            },
            "400": {
              "description": "Bad request. Invalid or missing email/password fields."
            },
            "401": {
              "description": "Unauthorized. Invalid credentials."
            }
          }
        }
      }
    },
    "definitions": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the user."
          },
          "email": {
            "type": "string",
            "description": "The email of the user."
          },
          "username": {
            "type": "string",
            "description": "The username of the user."
          }
        }
      }
    },
    "securityDefinitions": {
      "BearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Bearer token authentication"
      }
    },
    "security": [
      {
        "BearerAuth": []
      }
    ]
  }
  